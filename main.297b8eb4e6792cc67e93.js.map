{"version":3,"sources":["webpack:///./js/confetti.js","webpack:///./js/timer.js","webpack:///./js/snow.js"],"names":["showConfetti","confetti","create","document","getElementById","resize","useWorker","particleCount","spread","selector","targetDate","intervalId","this","start","updateTimer","setInterval","currentTime","Date","now","deltaTime","stop","clearInterval","updateTitle","time","days","Math","floor","hours","pad","mins","secs","timerRef","querySelector","daysRef","hoursRef","minsRef","secsRef","textContent","value","String","padStart","snowf","init","size","amount"],"mappings":"sIAEe,SAASA,IACtBC,IAASC,OAAOC,SAASC,eAAe,UAAW,CACjDC,QAAQ,EACRC,WAAW,GAFbL,CAGG,CAAEM,cAAe,IAAKC,OAAQ,MCgEd,I,WAlEnB,cAAyD,IAA3CC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,WAAiC,IAArBC,kBAAqB,MAAR,KAAQ,EACtDC,KAAKH,SAAWA,EACdG,KAAKF,WAAaA,EAClBE,KAAKD,WAAaA,E,2BAIvBE,MAAA,WAAQ,WACND,KAAKE,YAAY,GAEjBF,KAAKD,WAAaI,aAAY,WAC5B,IAAMC,EAAcC,KAAKC,MACnBC,EAAY,EAAKT,WAAaM,EAEpC,EAAKF,YAAYK,GAEbA,GAAa,GACf,EAAKC,SAGN,M,EAILA,KAAA,WACEC,cAAcT,KAAKD,YACnBC,KAAKD,WAAa,KAClBC,KAAKU,cACLV,KAAKE,YAAY,I,EAInBA,YAAA,SAAYS,GACV,IAAMC,EAAOC,KAAKC,MAAMH,EAAO,OACzBI,EAAQf,KAAKgB,IACjBH,KAAKC,MAAOH,EAAO,MAAR,OAEPM,EAAOjB,KAAKgB,IAAIH,KAAKC,MAAOH,EAAO,KAAR,MAC3BO,EAAOlB,KAAKgB,IAAIH,KAAKC,MAAOH,EAAO,IAAe,MAElDQ,EAAW5B,SAAS6B,cAAc,YAClCC,EAAUF,EAASC,cAAc,uBACjCE,EAAWH,EAASC,cAAc,wBAClCG,EAAUJ,EAASC,cAAc,uBACjCI,EAAUL,EAASC,cAAc,uBAEvCC,EAAQI,YAAR,GAAyBb,EACzBU,EAASG,YAAT,GAA0BV,EAC1BQ,EAAQE,YAAR,GAAyBR,EACzBO,EAAQC,YAAR,GAAyBP,G,EAI3BF,IAAA,SAAIU,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,M,EAInClB,YAAA,WACmBnB,SAAS6B,cAAc,UAC/BK,YAAc,0BACvBtB,YAAYf,EAAc,M,KAKT,CAAa,CAChCS,SAAU,WACVC,WAAY,IAAIO,KAAK,KAAM,EAAG,EAAG,EAAG,EAAG,KAI5BJ,Q,uBC1Eb4B,EAAMC,KAAK,CACTC,KAAM,EACNC,OAAQ,M","file":"main.297b8eb4e6792cc67e93.js","sourcesContent":["import confetti from 'canvas-confetti';\r\n\r\nexport default function showConfetti() {\r\n  confetti.create(document.getElementById('canvas'), {\r\n    resize: true,\r\n    useWorker: true,\r\n  })({ particleCount: 200, spread: 200 });\r\n}\r\n","import showConfetti from './confetti';\r\n\r\n// Декларация класса\r\nclass NewTimer {\r\n  constructor({ selector, targetDate, intervalId = null }) {\r\n    (this.selector = selector),\r\n      (this.targetDate = targetDate),\r\n      (this.intervalId = intervalId);\r\n  }\r\n\r\n  // Запускает отсчёт\r\n  start() {\r\n    this.updateTimer(0);\r\n\r\n    this.intervalId = setInterval(() => {\r\n      const currentTime = Date.now();\r\n      const deltaTime = this.targetDate - currentTime;\r\n\r\n      this.updateTimer(deltaTime);\r\n\r\n      if (deltaTime <= 0) {\r\n        this.stop();\r\n        return;\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  // Останавливает отсчёт\r\n  stop() {\r\n    clearInterval(this.intervalId);\r\n    this.intervalId = null;\r\n    this.updateTitle();\r\n    this.updateTimer(0);\r\n  }\r\n\r\n  // Обновляет таймер\r\n  updateTimer(time) {\r\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n    const hours = this.pad(\r\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n    );\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n    const timerRef = document.querySelector('#timer-1');\r\n    const daysRef = timerRef.querySelector('[data-value=\"days\"]');\r\n    const hoursRef = timerRef.querySelector('[data-value=\"hours\"]');\r\n    const minsRef = timerRef.querySelector('[data-value=\"mins\"]');\r\n    const secsRef = timerRef.querySelector('[data-value=\"secs\"]');\r\n\r\n    daysRef.textContent = `${days}`;\r\n    hoursRef.textContent = `${hours}`;\r\n    minsRef.textContent = `${mins}`;\r\n    secsRef.textContent = `${secs}`;\r\n  }\r\n\r\n  // Корректирует числовой формат\r\n  pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n\r\n  // Обновляет контент\r\n  updateTitle() {\r\n    const titleRef = document.querySelector('#title');\r\n    titleRef.textContent = 'Happy New Year 2022! 🥳';\r\n    setInterval(showConfetti, 2000);\r\n  }\r\n}\r\n\r\n// Конструктор класса\r\nconst newYearTimer = new NewTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date(2022, 0, 1, 0, 0, 0),\r\n});\r\n\r\n// Запускает отсчёт немедленно\r\nnewYearTimer.start();\r\n\r\n// Первый вариант через обьект\r\n\r\n// // Цифры от таймера в DOM\r\n// const daysRef = document.querySelector('[data-value=\"days\"]');\r\n// const hoursRef = document.querySelector('[data-value=\"hours\"]');\r\n// const minsRef = document.querySelector('[data-value=\"mins\"]');\r\n// const secsRef = document.querySelector('[data-value=\"secs\"]');\r\n// const titleRef = document.querySelector('#title');\r\n\r\n// // Обьект с методами\r\n// const timer = {\r\n//   intervalId: null,\r\n\r\n//   start() {\r\n//     const targetDate = new Date(2022, 0, 1, 0, 0, 0);\r\n\r\n//     updateTimer(0);\r\n\r\n//     this.intervalId = setInterval(() => {\r\n//       const currentTime = Date.now();\r\n//       const deltaTime = targetDate - currentTime;\r\n\r\n//       updateTimer(deltaTime);\r\n\r\n//       if (deltaTime <= 0) {\r\n//         alert('С Новым годом! 🎄');\r\n//         this.stop();\r\n//       }\r\n//     }, 1000);\r\n//   },\r\n\r\n//   stop() {\r\n//     clearInterval(this.intervalId);\r\n//     this.intervalId = null;\r\n//     updateTimer(0);\r\n//   },\r\n// };\r\n\r\n// // Запускает отсчёт\r\n// timer.start();\r\n\r\n// // Обновляет таймер\r\n// function updateTimer(time) {\r\n//   /*\r\n//    * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\r\n//    * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\r\n//    */\r\n//   const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n\r\n//   /*\r\n//    * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\r\n//    * остатка % и делим его на количество миллисекунд в одном часе\r\n//    * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n//    */\r\n//   const hours = pad(\r\n//     Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n//   );\r\n\r\n//   /*\r\n//    * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n//    * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n//    */\r\n//   const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n\r\n//   /*\r\n//    * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n//    * миллисекунд в одной секунде (1000)\r\n//    */\r\n//   const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n//   daysRef.textContent = `${days}`;\r\n//   hoursRef.textContent = `${hours}`;\r\n//   minsRef.textContent = `${mins}`;\r\n//   secsRef.textContent = `${secs}`;\r\n// }\r\n\r\n// function pad(value) {\r\n//   return String(value).padStart(2, '0');\r\n// }\r\n","import snowf from 'snowf';\r\n\r\nsnowf.init({\r\n  size: 5,\r\n  amount: 50,\r\n});"],"sourceRoot":""}